{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMf1+bY6/WfHvozgfilJLqO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/huy20146177/baitapAI/blob/main/baitapvenhatuan4_1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hcMHufr0IHbU",
        "outputId": "afb568a6-cd58-45b7-c19e-b84009c6117d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting scikit-fuzzy\n",
            "  Downloading scikit-fuzzy-0.4.2.tar.gz (993 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m994.0/994.0 KB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: numpy>=1.6.0 in /usr/local/lib/python3.8/dist-packages (from scikit-fuzzy) (1.22.4)\n",
            "Requirement already satisfied: scipy>=0.9.0 in /usr/local/lib/python3.8/dist-packages (from scikit-fuzzy) (1.10.1)\n",
            "Requirement already satisfied: networkx>=1.9.0 in /usr/local/lib/python3.8/dist-packages (from scikit-fuzzy) (3.0)\n",
            "Building wheels for collected packages: scikit-fuzzy\n",
            "  Building wheel for scikit-fuzzy (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for scikit-fuzzy: filename=scikit_fuzzy-0.4.2-py3-none-any.whl size=894088 sha256=8159b18546de848aab55d4aa852924a569c69f9adead00a892b2ece438c7025d\n",
            "  Stored in directory: /root/.cache/pip/wheels/2c/04/80/7eefb1a2de7d36aefd06432fab2a1486caf0a0596a7067391a\n",
            "Successfully built scikit-fuzzy\n",
            "Installing collected packages: scikit-fuzzy\n",
            "Successfully installed scikit-fuzzy-0.4.2\n"
          ]
        }
      ],
      "source": [
        "pip install scikit-fuzzy"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import skfuzzy as fuzz \n",
        "from skfuzzy import control as ctrl "
      ],
      "metadata": {
        "id": "SKO8H__AIK8n"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Wind_speed = ctrl.Antecedent(np.arange(0.7,3.2,0.1),'Wind_speed')\n",
        "Temperature = ctrl.Antecedent(np.arange(20.4,41.3,1),'Temperature')\n",
        "Rainfall = ctrl.Consequent(np.arange(0.2,9.2,0.1),'Rainfall')\n",
        "\n",
        "Wind_speed['Very Low WS']= fuzz.trimf(Wind_speed.universe,[0.7,0.7,1.2])\n",
        "Wind_speed['Low WS']= fuzz.trimf(Wind_speed.universe,[0.7,1.2,1.5])\n",
        "Wind_speed['Normal WS']= fuzz.trimf(Wind_speed.universe,[1.2,1.5,2.5])\n",
        "Wind_speed['High WS']= fuzz.trimf(Wind_speed.universe,[1.5,2.5,3.1])\n",
        "Wind_speed['Very High WS']= fuzz.trimf(Wind_speed.universe,[2.5,3.1,3.1])\n",
        "\n",
        "Temperature['Very Low TP']= fuzz.trimf(Temperature.universe,[20.4,20.4,25])\n",
        "Temperature['Low TP']= fuzz.trimf(Temperature.universe,[20.4,25,30])\n",
        "Temperature['Normal TP']= fuzz.trimf(Temperature.universe,[25,30,35])\n",
        "Temperature['High TP']= fuzz.trimf(Temperature.universe,[30,35,41.2])\n",
        "Temperature['Very High TP']= fuzz.trimf(Temperature.universe,[35,41.2,41.2])\n",
        "\n",
        "Rainfall['Very Low RF']= fuzz.trimf(Rainfall.universe,[0.9,0.9,1.8])\n",
        "Rainfall['Low RF']= fuzz.trimf(Rainfall.universe,[0.9,1.8,4])\n",
        "Rainfall['Normal RF']= fuzz.trimf(Rainfall.universe,[1.8,4,7])\n",
        "Rainfall['High RF']= fuzz.trimf(Rainfall.universe,[4,7,9.1])\n",
        "Rainfall['Very High RF']= fuzz.trimf(Rainfall.universe,[7,9.1,9.11])\n",
        "\n",
        "\n",
        "Wind_speed.view()\n",
        "Temperature.view()\n",
        "Rainfall.view()\n",
        "pip install scikit-fuzzy\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import skfuzzy as fuzz \n",
        "from skfuzzy import control as ctrl \n",
        "\n",
        "Wind_speed = ctrl.Antecedent(np.arange(0.7,3.2,0.1),'Wind_speed')\n",
        "Temperature = ctrl.Antecedent(np.arange(20.4,41.3,1),'Temperature')\n",
        "Rainfall = ctrl.Consequent(np.arange(0.2,9.2,0.1),'Rainfall')\n",
        "\n",
        "Wind_speed['Very Low WS']= fuzz.trimf(Wind_speed.universe,[0.7,0.7,1.2])\n",
        "Wind_speed['Low WS']= fuzz.trimf(Wind_speed.universe,[0.7,1.2,1.5])\n",
        "Wind_speed['Normal WS']= fuzz.trimf(Wind_speed.universe,[1.2,1.5,2.5])\n",
        "Wind_speed['High WS']= fuzz.trimf(Wind_speed.universe,[1.5,2.5,3.1])\n",
        "Wind_speed['Very High WS']= fuzz.trimf(Wind_speed.universe,[2.5,3.1,3.1])\n",
        "\n",
        "Temperature['Very Low TP']= fuzz.trimf(Temperature.universe,[20.4,20.4,25])\n",
        "Temperature['Low TP']= fuzz.trimf(Temperature.universe,[20.4,25,30])\n",
        "Temperature['Normal TP']= fuzz.trimf(Temperature.universe,[25,30,35])\n",
        "Temperature['High TP']= fuzz.trimf(Temperature.universe,[30,35,41.2])\n",
        "Temperature['Very High TP']= fuzz.trimf(Temperature.universe,[35,41.2,41.2])\n",
        "\n",
        "Rainfall['Very Low RF']= fuzz.trimf(Rainfall.universe,[0.9,0.9,1.8])\n",
        "Rainfall['Low RF']= fuzz.trimf(Rainfall.universe,[0.9,1.8,4])\n",
        "Rainfall['Normal RF']= fuzz.trimf(Rainfall.universe,[1.8,4,7])\n",
        "Rainfall['High RF']= fuzz.trimf(Rainfall.universe,[4,7,9.1])\n",
        "Rainfall['Very High RF']= fuzz.trimf(Rainfall.universe,[7,9.1,9.11])\n",
        "\n",
        "\n",
        "Wind_speed.view()\n",
        "Temperature.view()\n",
        "Rainfall.view()\n"
      ],
      "metadata": {
        "id": "I5NFxw-jIW5U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rule1 = ctrl.Rule(Wind_speed['Very Low WS']& Temperature['Very Low TP'], Rainfall['Very Low RF'])\n",
        "rule2 = ctrl.Rule(Wind_speed['Low WS']& Temperature['Low TP'], Rainfall['Very Low RF'])\n",
        "rule3 = ctrl.Rule(Wind_speed['Normal WS']& Temperature['Normal TP'], Rainfall['Normal RF'])\n",
        "rule4 = ctrl.Rule(Wind_speed['Normal WS']& Temperature['Very Low TP'], Rainfall['Normal RF'])\n",
        "rule5 = ctrl.Rule(Wind_speed['Normal WS']& Temperature['High TP'], Rainfall['Low RF'])\n",
        "rule6 = ctrl.Rule(Wind_speed['Normal WS']& Temperature['Low TP'], Rainfall['High RF'])\n",
        "rule7 = ctrl.Rule(Wind_speed['Normal WS']& Temperature['Very High TP'], Rainfall['Low RF'])\n",
        "rule8 = ctrl.Rule(Wind_speed['Very Low WS']& Temperature['Normal TP'], Rainfall['Low RF'])\n",
        "rule9 = ctrl.Rule(Wind_speed['Low WS']& Temperature['Normal TP'], Rainfall['Low RF'])\n",
        "rule10 = ctrl.Rule(Wind_speed['High WS']& Temperature['Normal TP'], Rainfall['Low RF'])\n",
        "rule11= ctrl.Rule(Wind_speed['Very High WS']& Temperature['Normal TP'], Rainfall['Very Low RF'])\n",
        "rule12 = ctrl.Rule(Wind_speed['Low WS']& Temperature['Very Low TP'], Rainfall['High RF'])\n",
        "rule13 = ctrl.Rule(Wind_speed['High WS']& Temperature['Very Low TP'], Rainfall['Low RF'])\n",
        "rule14 = ctrl.Rule(Wind_speed['Very High WS']& Temperature['Very Low TP'], Rainfall['Very High RF'])\n",
        "rule15 = ctrl.Rule(Wind_speed['Very Low WS']& Temperature['Low TP'], Rainfall['High RF'])\n",
        "rule16= ctrl.Rule(Wind_speed['High WS']& Temperature['Low TP'], Rainfall['Normal RF'])\n",
        "rule17 = ctrl.Rule(Wind_speed['Very High WS']& Temperature['Low TP'], Rainfall['Very High RF'])\n",
        "rule18 = ctrl.Rule(Wind_speed['Very Low WS']& Temperature['High TP'], Rainfall['Low RF'])\n",
        "rule19 = ctrl.Rule(Wind_speed['Low WS']& Temperature['High TP'], Rainfall['Very Low RF'])\n",
        "rule20 = ctrl.Rule(Wind_speed['High WS']& Temperature['High TP'], Rainfall['Low RF'])\n",
        "rule21= ctrl.Rule(Wind_speed['Very High WS']& Temperature['High TP'], Rainfall['Very Low RF'])\n",
        "rule22 = ctrl.Rule(Wind_speed['Very Low WS']& Temperature['Very High TP'], Rainfall['Very Low RF'])\n",
        "rule23 = ctrl.Rule(Wind_speed['Low WS']& Temperature['Very High TP'], Rainfall['Very Low RF'])\n",
        "rule24 = ctrl.Rule(Wind_speed['High WS']& Temperature['Very High TP'], Rainfall['Very Low RF'])\n",
        "rule25 = ctrl.Rule(Wind_speed['Very High WS']& Temperature['Very High TP'], Rainfall['Very High RF'])\n",
        "\n",
        "\n",
        "\n",
        "Rainfalling_ctrl = ctrl.ControlSystem([rule1,rule2,rule3,rule4,rule5,rule6,rule7,rule8,rule9,rule10,rule11,rule12,rule13,rule14,rule15,rule16,rule17,rule18,rule9,rule20,rule21,rule22,rule23,rule24,rule25])\n",
        "Rainfalling= ctrl.ControlSystemSimulation(Rainfalling_ctrl)\n",
        "Rainfalling.input['Temperature']= 30\n",
        "Rainfalling.input['Wind_speed']= 2\n",
        "Rainfalling.compute()\n",
        "print(Rainfalling.output['Rainfall'])\n",
        "Rainfall.view(sim=Rainfalling)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "uGxsm__NIcMe",
        "outputId": "aa67243c-1e36-4088-a732-dec81f4a5532"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.8683671507584045\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1dg2EEIuIusW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}